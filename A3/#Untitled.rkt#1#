#lang racket
(require srfi/1)

;BST constructor: Creates an empty BST
;(define createBST '())
(define list '())

(define test '( 1 2 4 5))
;Sample data to build the BST
(define sample '( 6 4 5 3 8 9 1 2 20 15 12 23 ))
(define rSub '())
(define root (car sample))
(define found '())
(define notInBST '())
(define mapList '())
(define sortBST '())



;createBST
(define createBST '())
 
;is the BST empty
(define (isEmpty lst)
  (if (null? lst) "true" "false"))
;Add value to BST
(define (addToBST lst v k)
  (cond[(null? lst) (set! createBST (cons v lst))] 
       [(> v root) (set! rSub (cons v rSub))]
       [(< v root) (set! createBST  (cons v lst))]))

;Search BST
(define (searchBST BST v e)
(if(member v createBST) (displayln v) (displayln " ")));(set! found (cons (list-ref createBST (list-index (curry equal? v) createBST)) found)) (set! notInBST (cons v notInBST )))
;(if(member v createBST) (displayln found) (displayln notInBST))) 



;MAP BST
(define (mapBST BST )
  (set!  mapList (append BST mapList))
  (displayln mapList))

(define (foldBST BST)
  (set! sortBST (sort BST <))
        (displayln sortBST))


(define (testRun)
(for ([e (in-list sample)])
  ( addToBST createBST e e)
  ;(displayln e)
  )
(set! createBST (append createBST rSub))
  )

;Show the contents of the list
(define (show)
  (set! createBST (append createBST rSub))
  (displayln createBST))







 






     